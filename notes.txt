What is a Hash Table?
  The Hash table data structure stores elements in key-value pairs where
    Key- unique integer that is used for indexing the values
    Value - data that are associated with keys.
  

We have built in Hash Table in JavaScript called Objects.


Structure of an Object:
  const Object = {
    key: key,
    value: value
  }


How Hash tables get stored in the memory?
  In order to store a hash table in memory we run through a hash function, and it's the only key that goes through the hash function.

All letters have aasci numericale values, hash function run through these values through a math equation and create a number, and base on that number it give us an address. Hash function determine where should we put the value in memory. Also for lookup we go thourgh the hash function to find a value


There are two characteristic that you need to know
  1. They are one way
  2. Deterministic


What is mean by One-Way?
  Let's say you stored an object containing key nails, and the hash function gives the number 2 to store that value in the memory, what you can't do is that you give number 2 and get the string nails.


What is mean by Deterministic?
  It means when you run nails through hash function and it gives you number 2, and when you run this string nails again you will get number 2 again. It will always produce the same number.


When we are gonna implement our set(key, value) method in hash table, we will pass key and value and this method will return back array containing key and value that we will store in our hash array, but it's gonna also give us memory address base on the key that we passed.


When we have values in hash tables, and sometime it might possible that our hash function generate same memory address that we have already used to save another value, in that we don't want to remove other value, instead we want to save both values, and this is what is called collision. There are multiple ways to deal with collision.


When we do get method to get a value, our hash function generates memory address from the passed key and then returns back the value of that string. But if we have collision and stored multiple values in the same memory address than we need to go deeper to get that value.



---------------- Collision
What is Collision?
  It means when we have an item that maps to the same spot in the memory that already have item. In case of collision items are stored something like this:
    const collisionMemory = [
      ['nails', 1000],
      ['nuts', 1000]
    ]


This process putting all of the key value pairs that mapped to a particular address in the same address space what's called separate chaining.


Another approach is that we check if the spot is empty than add it over there if not than add some where else. Because the items are stored in sequential way we check step by step. This is what called Linear Probing, and it is a type of open addressing, there are multiple ways of doing open addressing.


Anothe approach is that when we have multiple items in the same memory address than we can add items like linked list to that spot.


-- Creating constructor for Hash Table:
  While creating the constructor for Hash Table we need to pass the size of the hash table, and our defualt size is gonna be 7.
  constructor(size = 7) {
    this.dataMap = new Array(size)
  }


While creating our hash method we are using _ underscore in the start of the method, and tells other developers that this method should only be called by other methods, should not be called directly.
