What is a Stack?
  A stack is a linear data structure that follows the principle of Last In First Out (LIFO). This means the last element inserted inside the stack is removed first.


In stack adding an item is pushing and removing an item is poping


In Stack we can't get the last item, we can only get the last item mean the first item on top of the stack list.


Examples of Stacks
  1. We are browsing the internet we gone through multiple social platforms, we are making a stack, and when we go back the popping is happen step by step.
  Like:
    4. Facebook
    3. Google
    2. Amazon
    1. Microsoft
  After pressing the back button on FB we can only go back to Google

  2. Used in Call Stack


How to implement a Stack?
  A very common way to implement a stack is using an Array. 
  

Note:
  If you are gonna build a stack with Array always use end for popping and pushing items, becuase if you use start for these operations after every step you need to move items and it will cost O(n), but if you implement these operations on the end it will only cost O(1).


We are gonna build the Stack using Linked List. While building a Stack with Linked List always use Left side as the top, in other words null terminated side will be on the bottom. If we add an item at the end of linked list it's take O(1), but deleting an item from the end takes O(n) because we need to iterate over the list, on the other side if we add and remove item from the start of the linked list it's only gonna take O(1).


We can use Linked List Sift() and Unshift() method to build a stack, and rename head with top and remove tail.



Strcuture of Node in Stack:
  const Node = {
    value: 1,
    next: null,
  }


Structure of Stack Constructor:
  class Stack {
    constructor(value) {
      const newNode = new Node(value)
      this.top = newNode
      this.length = 1
    }
  }


-- Here we have a Prev pointer that points the previous Node in the List.

-- There is nothing that changes in Linked List class, it's the same as in the Singly List.








/////////////////////////////////////
---------------------     Big Notations     -------------
Pop (remove last item)                =   O(1)
Push (add new item at the end)        =   O(1)
