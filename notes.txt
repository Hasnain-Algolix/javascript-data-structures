/////////////////////////////////////
---------------------     Big Notations     -------------
Pop (remove last item)                =   O(n)
Push (add new item at the end)        =   O(1)

Shift (remove first item)             =   O(1)
Unshift (adds a new item at the end)  =   O(1)

Insert (add item at an index)         =   O(n)
Delete (at given index)               =   O(n)

Traverse                              =   O(n)






/////////////////////////////////////
---------------------     Push()     -------------
Steps:
  1. Create a new Node
  2. Point last Node point to it
  3. Tail point to this new node


Steps to insert a Node into a LinkedList that doesn't have a Node yet
  1. Point Head and Tail to this new Node

-- Note:
        When we return 'this' it returns entire LinkedList class, and it's returning a particular instance of the LinkedList












/////////////////////////////////////
---------------------     Pop()     -------------
Approach:
  We need to traverse the Linked List get the second last item in the linked list, then we are gonna delete the last item and point Tail to this selected (second last) Node.


-- How we are gonna keep track of second last item?
We have two variables 'temp' and 'pre'. 

-- Temp is going to be the variable that once we iterate through the linked list it is going to pointing to that last item we return.

-- Pre is item next to last, in simple words it's gonna be second last item


-- We iterate over the list, if temp.next point to next node, then we are gonna say pre is equal to temp, then we are gonna say temp is equal to temp.next, we are gonna keep iterating over the list like select a item as temp if it points to next then move next and also move pre also next until we get to the last node, we temp points to null then it's gonna stop iteration

Steps:
  1. Remove last item
  2. Point Tail to the last item
  3. This Node point to Null


Edge Cases:
  1. We might have no item (empty Linked List)
  2. We might only have one item in Linked List

Test Cases:
  1. Add some items
  2. Remove item while list contains 2 items
  3. List has only one item use pop() method













/////////////////////////////////////
---------------------     Unshift()     -------------
Steps:
  1. Create a new Node
  2. New Node point to first Node in other words points to Head
  3. Check List is empty or have items in it
  4. Increase length
  5. Return entire Linked List













  /////////////////////////////////////
---------------------     Shift()     -------------
Steps:
  1. Move Head over to the Next item
  2. Remove the first item
  3. What if we have one item
  4. What if we don't have any item in list
  5. We need to return the deleted item, so need to keep reference of that item
  6. After selecting the first element set it to null

-- Create a variable 'temp' that keeps reference to the first item, then set head.next to the next item










  /////////////////////////////////////
---------------------     Get()     -------------
-- Get a Node by index

Steps:
  1. Make sure the index is not greater or less then the length of the List
  2. Set a variable pointing to the current Node in the iteration to return it, set temp to head










  /////////////////////////////////////
---------------------     Set()     -------------
-- Change the value of Node at index

Steps:
  1. Select the item by given index (use the get() method)
  2. Change the value of the selected Node if it exists and return true
  3. If Node not exists then return false
