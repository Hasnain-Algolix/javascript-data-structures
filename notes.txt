What is Recursion?
It's a function that calls itself, until it doesn't


Let's say we have a gift box, in order to open the gift box we need to run the opneGiftBox() method, and there is one of two things that we are gonna get when we open this gift box, a ball, or we are gonna get another gift box, if we get the gift box we open gift box with openGiftBox() method. When we open this gift box we will get ball or another gift box, after this gift box let's say we got the ball.


This is Pseudo Code, this isn't real code that you can run this is example purpose only.
Like:
  function openGiftBox() {
    if(isBall) return ball
    openGiftBox()
  }

It means funciton is going to call itself.

There are two key rules that you have to understand with recursion.
  1. The process of opening each new box is the same, or the process of doing what every doing with recursion has to be the same. In this case we constantly opening the gift boxes
  2. Each time when we open a box, we make the problem smaller, or whatever you are going with recursion each time you have the function call itself it has to be operating a smaller and smaller problem


When we open a box and got a gift box, we again call the openGiftBox() function we make another instance of this function, we keep calling the function making the instance until we get the ball.


When we open a box and it has a ball in it, this is what is called Base Case, this is when our if statement was true, if we got another gift box this is called a Recursive Case, in this case we need to have the function call itself, and when we have another gift box that is another recursive case, and when we get the ball this is Call Base Case, that is when we stop opening the gift box


You always have to have some confitional that is going to be true at some point, it cause you to stop having the function call itself, if you don't add any conditional it will call the function again and again, and this will go over into infinite loop, and you a Stack Overflow.


Some people add an if statemen that is never true.

You should also have a return statement






------------------ Call Stack -----------------
We have a data structure called Stack, when we add balls into our stack the last ball we add in the stack, we can get it first. 

We have a function funcOne and it's logs the One on the console, when you run this function it goes into call stack.
Like:
  |           |
  |           |
  |           |
  | funcOne() |

Once the function one is done running and will be removed from the call stack.

Now we added the function two into the function one and it gets called before the console of the function one. Before the function two is called it is going to call the function three, in function three we are only going to have console. All these functions will be added into call stack.
Like:
  funcOne() {
    funcTwo()
    console.log('One')
  }

  funcTwo() {
    funcThree()
    console.log('One')
  }

  funcThree() {
    console.log('Three')
  }

  |             |
  | funcThree() |
  | funcTwo()   |
  | funcOne()   |

As the funcThree() is on the top of the call stack, so this function will be executed first, and when its called it will be poped out from the call stack. This thing will happen for all the other functions.

Notice we called the funcOne first and the funcThree last, but the funcThree gets called first, and the firstFunc() get's called at the end, this is because of the order that these functions added into the call stack.

To get the better idea of these three functions run them in the broweser and make breakpoint on funcOne, and than step over to function to see the difference.








------------------ Factorial -----------------
What is Factorial?
This is 4 factorial, this is represented something like this:
Like:
  4!
  4 * 3 * 2 * 1

The last 3 numbers are 3! factorial and we could say, and we can say until we reach to the last number:
Like:
  4! * 3!
    3! * 2!
      2! * 1!
        1   <-- This is our base case. Once we reach to one we stop the break down that we did.


One thing in recursion is that each time the problem gets smaller and smaller,


We have a factorial() function that takes n as param, and if the number is equalt to 1 it returns 1 otherwise, it will return the number and it's factorial.
Like:
  function factorial(n) {
    if(n === 1) return 1
    return n * factorial(n-1)
  }

How can we get the factorial of a value?
4 * 4 - 1 = 4! * 3!


Need to see some other examples for recursion to more understand it.
Leaved at factorial lecture.















